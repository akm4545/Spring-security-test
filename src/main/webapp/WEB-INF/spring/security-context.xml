<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/security 
						http://www.springframework.org/schema/security/spring-security.xsd
						http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">
	
	
	<!-- <http auto-config='true'> : 
		스프링 시큐리티가 기본 로그인페이지를 제공해준다. 
		나중에 나오겠지만 로그인 페이지를 개발자 입맛에 맞게 커스텀 할 수 있다.-->
	<http auto-config="true" use-expressions="true">
		<intercept-url pattern="/favicon.ico" access="hasRole('ROLE_ANONYMOUS')" />
		<intercept-url pattern="/resources/**" access="permitAll"/> <!-- 자원에 대한 접근 모두 -->
		<intercept-url pattern="/login/**" access="permitAll" />	
		<intercept-url pattern="/**" access="hasRole('ROLE_USER')" /> <!-- 순서대로 권한 우선순위가 있으므로 위에것을 제외하고 모두 유저권한 필요 -->
		
		<!-- 로그인 페이지 커스텀
			-login-page 속성에 앞서 만든 로그인 페이지의 url을 입력한다. 
			-login-processing-url 속성은 loginPage.jsp를 만들 때, <form>태그의 action URL이다. 즉, login을 처리하는 부분이 따로 필요하지 않다.
			-authentication-failure-url 속성은 로그인을 실패했을 때(아이디와 패스워드가 틀린 경우) 이동할 url이다. 본 예제에서는 로그인 페이지에 err파라미터를 true로 보냈다. 그리고 loginPage.jsp에서 jstl로 예외 처리하였습니다.
			-default-target-url 속성은 로그인이 성공했을 때 이동하는 주소이다.
			-username-parameter와 password-parameter는 로그인시 파라미터로 전달받을 이름을 정의한다. loginPage.jsp에서 정의한 로그인 아이디와 비밀번호를 입력받는 <input> 태그의 name과 일치해야 한다.		
		 -->
		<form-login login-page="/login/loginPage.do" 
			authentication-failure-url="/login/loginPage.do?err=true"
			default-target-url="/"
			username-parameter="userid"
			password-parameter="userpw"/>
		
		<!-- 세션 수 설정 중복 로그인 방지 expired-url = 중복 로그인 발생시 url-->	
		<session-management>
			<concurrency-control max-sessions="1" expired-url="/" />
		</session-management>
		
		<!-- 접근 불가 페이지 -->
		<access-denied-handler error-page="/login/accessDenied.do" />
		<csrf disabled="true"/>
		
		<!-- 로그아웃 invalidate-session="true" 세션 끊기-->
		<logout logout-url="/logout" logout-success-url="/" invalidate-session="true"/>
	</http>
	<!-- 
		<authentication-manager> : 유저들의 권한을 설정한다. 
		<user>태그의 authorities 옵션은 해당 유저의 권한을 뜻한다. 
		admin 유저는 ROLE_USER와 ROLE_ADMIN 권한을 갖고 있으며, 
		guest와 guest2는 ROLE_USER 권한만 가지고 있음을 뜻한다.
		권한을 설정할 땐 기본적으로 "ROLE_” 를 접두어로 붙여 사용한다. 
		만약 다른 네임 규칙을 정하고 싶다면 <authentication-provider> 태그 내에 role-prefix 
		옵션을 통해 변경할 수 있다.
	 -->
	<!-- 
	<authentication-manager>
		<authentication-provider>
			<user-service>
				<user name="admin" password="1234" authorities="ROLE_USER, ROLE_ADMIN" />
				<user name="guest" password="1234" authorities="ROLE_USER" />
			</user-service>
		</authentication-provider>
	</authentication-manager>
	 -->
	 <!-- 
		 <jdbc-user-service data-source-ref="dataSource" /> : root-context.xml에서 설정한 bean id를 가져온다.
		  user-by-username-query : 사용자 인증을 가져온다. username, password, enabled 컬럼은 필수이다. 이는 스프링에서 지정된 컬럼명이며 만일 테이블 커럶과 다른 경우 별칭(AS)을 줘서 변경하도록 한다. 
		  Enabled 필드 값이 0이면 비활성이고 1이면 활성을 의미한다.
		  authorities-by-username-query : 권한 인증을 가져온다. Authority 필드 값은 "ROLE_ADMIN" 이나 "ROLE_USER"가 오도록 한다.	 
	  -->
	  <!-- 직접 DB연결
	 <authentication-manager>
		<authentication-provider>
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="SELECT MEMBER_ID AS username,
					MEMBER_PWD AS PASSWORD,
					1 AS enabled
					FROM ST WHERE MEMBER_ID = ?"
				authorities-by-username-query="SELECT MEMBER_ID AS username,
					CASE WHEN 
						MEMBER_GRADE = 1
					THEN 
						'ROLE_ADMIN'
					ELSE 
						'ROLE_USER'
					END
						authority
					FROM ST WHERE MEMBER_ID = ?"
			/>
		</authentication-provider>
	</authentication-manager>
	-->
	
	<authentication-manager>
    	<authentication-provider user-service-ref="userService"/>
	</authentication-manager>
        
	<beans:bean id="userService" class="com.company.board.custom.CustomUserDetailsService"/>

</beans:beans>